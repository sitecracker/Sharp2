using Microsoft.Extensions.Caching.Memory;
using second_quiz.Domain;

namespace second_quiz.Services
{
    public class ItemService : IItemService
    {
        private IMemoryCache _memoryCache;

        public ItemService(IMemoryCache memoryCache)
        {
            _memoryCache = memoryCache;
        }

        public void AddItemsToCache(Item item)
        {
            if (!_memoryCache.TryGetValue("items", out List<Item> items))
            {
                items = new List<Item>();
            }

            items.Add(item);

            _memoryCache.Set("items", items);

        }

        public List<Item> GetFilteredItems(string type, int minYear)
        {
            _memoryCache.TryGetValue("items", out List<Item> allItems);
            if (allItems == null)
            {
                return new List<Item>();
            }

            var items = allItems.Where(x => x.Type == type && x.CreateYear > minYear)
                .OrderBy(x => x.CreateYear).ToList();
            
            return items;
        }

        public List<Item> GetItems(int pageIndex, int pageSize)
        {
            _memoryCache.TryGetValue("items", out List<Item> allItems);
            if (allItems == null) 
            {
                return new List<Item>();
            }

            var pageItem = allItems.Skip(((pageIndex - 1) * pageSize))
                .Take(pageSize).ToList();

            return pageItem;
        }

        public List<Item> GetItemsFromCache()
        {
            _memoryCache.TryGetValue("items", out List<Item> items);
            if (items != null)
            {
                return items;
            }
            else 
            {
                return new List<Item>();
            }
        }
    }
}
